<?xml version='1.0' encoding='UTF-8' ?>
<!-- Created by Uniface - (C) Rocket Software B.V. All rights reserved -->
<!DOCTYPE UNIFACE PUBLIC "UNIFACE.DTD" "UNIFACE.DTD">
<UNIFACE release="10.4" repversion="8" xmlengine="2.0">
<TABLE>
<DSC name="ULIBSNP" model="DICT" system="S" pseudo ="73" level="1" noupdate="0"
 rbk="0" ffsql="0" transnr="0" segsize="0" ufocc="0" charset=".U">
<FLD name="UNAME" seqno="1" type="S" level="2" pack="0" scale="0" length="60"
 pointer="0" inum="1" ufocc="0" mandatory="yes" idxnum="1" idxsnr="101" />
<FLD name="UKVERSION" seqno="2" type="N" level="2" pack="10" scale="0" length="2"
 pointer="0" inum="1" ufocc="0" idxnum="2" idxsnr="1" />
<FLD name="UMVERSION" seqno="3" type="N" level="2" pack="10" scale="0" length="2"
 pointer="0" inum="1" ufocc="0" idxnum="3" idxsnr="1" />
<FLD name="UDESCR" seqno="4" type="S" level="2" pack="13" scale="0" length="256"
 pointer="0" inum="0" ufocc="0" />
<FLD name="UTIMESTAMP" seqno="5" type="E" level="2" pack="0" scale="0" length="15"
 pointer="0" inum="0" ufocc="0" />
<FLD name="UPURPOSE" seqno="6" type="S" level="2" pack="1" scale="0" length="1"
 pointer="0" inum="0" ufocc="0" />
<FLD name="UALT_NAME" seqno="7" type="S" level="2" pack="13" scale="0" length="128"
 pointer="0" inum="0" ufocc="0" />
<FLD name="UKEYWORDS" seqno="8" type="S" level="2" pack="13" scale="0" length="256"
 pointer="0" inum="0" ufocc="0" />
<FLD name="UWAORDER" seqno="9" type="N" level="2" pack="7" scale="0" length="5"
 pointer="0" inum="0" ufocc="0" />
<FLD name="UCOMMENT" seqno="10" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",0,0,0,,1,0,1,\1D,0,0,0,," />
</DSC>
<OCC>
<DAT name="UNAME">USTRUCT</DAT>
<DAT name="UKVERSION">7</DAT>
<DAT name="UMVERSION">2</DAT>
<DAT name="UDESCR" xml:space='preserve'>Library of Struct handling snippets</DAT>
<DAT name="UTIMESTAMP">2022-05-16T15:24:28.00</DAT>
<DAT name="UPURPOSE">N</DAT>
</OCC>
</TABLE>
<TABLE>
<DSC name="USNP" model="DICT" system="S" pseudo ="73" level="1" noupdate="0"
 rbk="0" ffsql="0" transnr="0" segsize="0" ufocc="0" charset=".U">
<FLD name="UTIMESTAMP" seqno="1" type="E" level="2" pack="0" scale="0" length="15"
 pointer="0" inum="0" ufocc="0" />
<FLD name="UNAME" seqno="2" type="S" level="2" pack="0" scale="0" length="60"
 pointer="0" inum="2" ufocc="0" mandatory="yes" idxnum="1,4" idxsnr="103,1" />
<FLD name="USYNTAX" seqno="3" type="S" level="2" pack="0" scale="0" length="16"
 pointer="0" inum="2" ufocc="0" mandatory="yes" idxnum="1,4" idxsnr="102,2" />
<FLD name="ULIBRARY" seqno="4" type="S" level="2" pack="0" scale="0" length="60"
 pointer="0" inum="2" ufocc="0" mandatory="yes" idxnum="1,5" idxsnr="101,1" />
<FLD name="UCATEGORY" seqno="5" type="S" level="2" pack="0" scale="0" length="32"
 pointer="0" inum="0" ufocc="0" />
<FLD name="UKVERSION" seqno="6" type="N" level="2" pack="10" scale="0" length="2"
 pointer="0" inum="1" ufocc="0" idxnum="2" idxsnr="1" />
<FLD name="UMVERSION" seqno="7" type="N" level="2" pack="10" scale="0" length="2"
 pointer="0" inum="1" ufocc="0" idxnum="3" idxsnr="1" />
<FLD name="UDESCR" seqno="8" type="S" level="2" pack="13" scale="0" length="256"
 pointer="0" inum="0" ufocc="0" />
<FLD name="UPURPOSE" seqno="9" type="S" level="2" pack="1" scale="0" length="1"
 pointer="0" inum="0" ufocc="0" />
<FLD name="UALT_NAME" seqno="10" type="S" level="2" pack="13" scale="0" length="128"
 pointer="0" inum="0" ufocc="0" />
<FLD name="UKEYWORDS" seqno="11" type="S" level="2" pack="13" scale="0" length="256"
 pointer="0" inum="0" ufocc="0" />
<FLD name="UWAORDER" seqno="12" type="N" level="2" pack="7" scale="0" length="5"
 pointer="0" inum="0" ufocc="0" />
<FLD name="UCOMMENT" seqno="13" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",0,0,0,,1,0,1,\1D,0,0,0,," />
<FLD name="UTEXT" seqno="14" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\C2,0,0,0,,0,0,0,," />
</DSC>
<OCC>
<DAT name="UNAME">ADDNODE</DAT>
<DAT name="USYNTAX">PROCSCRIPT</DAT>
<DAT name="ULIBRARY">USTRUCT</DAT>
<DAT name="UKVERSION">7</DAT>
<DAT name="UMVERSION">2</DAT>
<DAT name="UDESCR" xml:space='preserve'>Add child node to a struct</DAT>
<DAT name="UALT_NAME" xml:space='preserve'>NewChild = ustruct::addNode(Source, NamePerLevel)</DAT>
<DAT name="UTEXT" xml:space='preserve'>ustruct::addNode(Struct, "name1&uSEP;name2&uSEP;...")</DAT>
</OCC>
<OCC>
<DAT name="UNAME">ADDNODEANDSTRUCT</DAT>
<DAT name="USYNTAX">PROCSCRIPT</DAT>
<DAT name="ULIBRARY">USTRUCT</DAT>
<DAT name="UKVERSION">7</DAT>
<DAT name="UMVERSION">2</DAT>
<DAT name="UDESCR" xml:space='preserve'>Add child node to a struct and move a 2nd struct there</DAT>
<DAT name="UALT_NAME" xml:space='preserve'>NewChild = ustruct::addNode(Source, NamePerLevel)</DAT>
<DAT name="UTEXT" xml:space='preserve'>ustruct::addNode(Struct, "name1&uSEP;name2&uSEP;...")</DAT>
</OCC>
<OCC>
<DAT name="UNAME">ADDNODEANDVALUE</DAT>
<DAT name="USYNTAX">PROCSCRIPT</DAT>
<DAT name="ULIBRARY">USTRUCT</DAT>
<DAT name="UKVERSION">7</DAT>
<DAT name="UMVERSION">2</DAT>
<DAT name="UDESCR" xml:space='preserve'>Add child node to struct and assign value</DAT>
<DAT name="UALT_NAME" xml:space='preserve'>NewChild = ustruct::addNodeAndValue(Source, NamePerLevel, Value)</DAT>
<DAT name="UTEXT" xml:space='preserve'>ustruct::addNodeAndValue(Struct, "name1&uSEP;name2&uSEP;...", Any)</DAT>
</OCC>
<OCC>
<DAT name="UNAME">FROMCOMPONENT</DAT>
<DAT name="USYNTAX">PROCSCRIPT</DAT>
<DAT name="ULIBRARY">USTRUCT</DAT>
<DAT name="UKVERSION">7</DAT>
<DAT name="UMVERSION">2</DAT>
<DAT name="UDESCR" xml:space='preserve'>Return struct created from component data</DAT>
<DAT name="UALT_NAME" xml:space='preserve'>NewStruct = ustruct::fromComponent()</DAT>
<DAT name="UTEXT">ustruct::fromComponent()</DAT>
</OCC>
<OCC>
<DAT name="UNAME">FROMJSON_0</DAT>
<DAT name="USYNTAX">PROCSCRIPT</DAT>
<DAT name="ULIBRARY">USTRUCT</DAT>
<DAT name="UKVERSION">7</DAT>
<DAT name="UMVERSION">2</DAT>
<DAT name="UDESCR" xml:space='preserve'>Return struct created from JSON string</DAT>
<DAT name="UALT_NAME" xml:space='preserve'>NewStruct = ustruct::fromJSON(Source)</DAT>
<DAT name="UTEXT">ustruct::fromJSON(String)</DAT>
</OCC>
<OCC>
<DAT name="UNAME">FROMJSON_1</DAT>
<DAT name="USYNTAX">PROCSCRIPT</DAT>
<DAT name="ULIBRARY">USTRUCT</DAT>
<DAT name="UKVERSION">7</DAT>
<DAT name="UMVERSION">2</DAT>
<DAT name="UDESCR" xml:space='preserve'>Return struct created from JSON literal string</DAT>
<DAT name="UALT_NAME" xml:space='preserve'>NewStruct = ustruct::fromJSON(Source)</DAT>
<DAT name="UTEXT">ustruct::fromJSON('"{"object1":1,"object2":2}"')</DAT>
</OCC>
<OCC>
<DAT name="UNAME">FROMJSON_2</DAT>
<DAT name="USYNTAX">PROCSCRIPT</DAT>
<DAT name="ULIBRARY">USTRUCT</DAT>
<DAT name="UKVERSION">7</DAT>
<DAT name="UMVERSION">2</DAT>
<DAT name="UDESCR" xml:space='preserve'>Return struct created from JSON blockdata</DAT>
<DAT name="UALT_NAME" xml:space='preserve'>NewStruct = ustruct::fromJSON(Source)</DAT>
<DAT name="UTEXT" xml:space='preserve'>ustruct::fromJSON($JSON)
JSON:blockdata ~
{
  "object1": 1,
  "object2": 1,

}
~
</DAT>
</OCC>
<OCC>
<DAT name="UNAME">FROMLIST_0</DAT>
<DAT name="USYNTAX">PROCSCRIPT</DAT>
<DAT name="ULIBRARY">USTRUCT</DAT>
<DAT name="UKVERSION">7</DAT>
<DAT name="UMVERSION">2</DAT>
<DAT name="UDESCR" xml:space='preserve'>Return struct created from list</DAT>
<DAT name="UALT_NAME" xml:space='preserve'>NewStruct = ustruct::fromList(Source)</DAT>
<DAT name="UTEXT">ustruct::fromList(String)</DAT>
</OCC>
<OCC>
<DAT name="UNAME">FROMLIST_1</DAT>
<DAT name="USYNTAX">PROCSCRIPT</DAT>
<DAT name="ULIBRARY">USTRUCT</DAT>
<DAT name="UKVERSION">7</DAT>
<DAT name="UMVERSION">2</DAT>
<DAT name="UDESCR" xml:space='preserve'>Return struct created from literal indexed list</DAT>
<DAT name="UALT_NAME" xml:space='preserve'>NewStruct = ustruct::fromList(Source)</DAT>
<DAT name="UTEXT" xml:space='preserve'>ustruct::fromList("1&uSEP;2")</DAT>
</OCC>
<OCC>
<DAT name="UNAME">FROMLIST_2</DAT>
<DAT name="USYNTAX">PROCSCRIPT</DAT>
<DAT name="ULIBRARY">USTRUCT</DAT>
<DAT name="UKVERSION">7</DAT>
<DAT name="UMVERSION">2</DAT>
<DAT name="UDESCR" xml:space='preserve'>Return struct created from literal associated list</DAT>
<DAT name="UALT_NAME" xml:space='preserve'>NewStruct = ustruct::fromList(Source)</DAT>
<DAT name="UTEXT" xml:space='preserve'>ustruct::fromList("object1=1&uSEP;object2=2")</DAT>
</OCC>
<OCC>
<DAT name="UNAME">FROMXML</DAT>
<DAT name="USYNTAX">PROCSCRIPT</DAT>
<DAT name="ULIBRARY">USTRUCT</DAT>
<DAT name="UKVERSION">7</DAT>
<DAT name="UMVERSION">2</DAT>
<DAT name="UDESCR" xml:space='preserve'>Return struct from XML string data</DAT>
<DAT name="UALT_NAME" xml:space='preserve'>NewStruct = ustruct::fromXML(Source)</DAT>
<DAT name="UTEXT">ustruct::fromXML(String)</DAT>
</OCC>
<OCC>
<DAT name="UNAME">GETFIRSTCHILD</DAT>
<DAT name="USYNTAX">PROCSCRIPT</DAT>
<DAT name="ULIBRARY">USTRUCT</DAT>
<DAT name="UKVERSION">7</DAT>
<DAT name="UMVERSION">2</DAT>
<DAT name="UDESCR" xml:space='preserve'>Return first child node of a struct</DAT>
<DAT name="UALT_NAME" xml:space='preserve'>FirstChild = ustruct::getFirstChild(Parent)</DAT>
<DAT name="UTEXT">ustruct::getFirstChild(Struct)</DAT>
</OCC>
<OCC>
<DAT name="UNAME">GETLASTCHILD</DAT>
<DAT name="USYNTAX">PROCSCRIPT</DAT>
<DAT name="ULIBRARY">USTRUCT</DAT>
<DAT name="UKVERSION">7</DAT>
<DAT name="UMVERSION">2</DAT>
<DAT name="UDESCR" xml:space='preserve'>Return last child node of a struct</DAT>
<DAT name="UALT_NAME" xml:space='preserve'>LastChild = ustruct::getLastChild(Parent)</DAT>
<DAT name="UTEXT">ustruct::getLastChild(Struct)</DAT>
</OCC>
<OCC>
<DAT name="UNAME">GETNEXT</DAT>
<DAT name="USYNTAX">PROCSCRIPT</DAT>
<DAT name="ULIBRARY">USTRUCT</DAT>
<DAT name="UKVERSION">7</DAT>
<DAT name="UMVERSION">2</DAT>
<DAT name="UDESCR" xml:space='preserve'>Return next sibling node of struct</DAT>
<DAT name="UALT_NAME" xml:space='preserve'>NextChild = ustruct::getNext(Sibling)</DAT>
<DAT name="UTEXT">ustruct::getNext(Struct)</DAT>
</OCC>
<OCC>
<DAT name="UNAME">GETPARENT</DAT>
<DAT name="USYNTAX">PROCSCRIPT</DAT>
<DAT name="ULIBRARY">USTRUCT</DAT>
<DAT name="UKVERSION">7</DAT>
<DAT name="UMVERSION">2</DAT>
<DAT name="UDESCR" xml:space='preserve'>Return parent node of struct</DAT>
<DAT name="UALT_NAME" xml:space='preserve'>Parent = ustruct::getParent(Child)</DAT>
<DAT name="UTEXT">ustruct::getParent(Struct)</DAT>
</OCC>
<OCC>
<DAT name="UNAME">GETPREVIOUS</DAT>
<DAT name="USYNTAX">PROCSCRIPT</DAT>
<DAT name="ULIBRARY">USTRUCT</DAT>
<DAT name="UKVERSION">7</DAT>
<DAT name="UMVERSION">2</DAT>
<DAT name="UDESCR" xml:space='preserve'>Return previous sibling node of struct</DAT>
<DAT name="UALT_NAME" xml:space='preserve'>Previous = ustruct::getPrevious(Sibling)</DAT>
<DAT name="UTEXT">ustruct::getPrevious(Struct)</DAT>
</OCC>
<OCC>
<DAT name="UNAME">ISSTRUCT</DAT>
<DAT name="USYNTAX">PROCSCRIPT</DAT>
<DAT name="ULIBRARY">USTRUCT</DAT>
<DAT name="UKVERSION">7</DAT>
<DAT name="UMVERSION">2</DAT>
<DAT name="UDESCR" xml:space='preserve'>Returns whether variable refers to struct</DAT>
<DAT name="UALT_NAME" xml:space='preserve'>Boolean = ustruct::isStruct(Struct)</DAT>
<DAT name="UTEXT">ustruct::isStruct(Struct)</DAT>
</OCC>
<OCC>
<DAT name="UNAME">QUERY_0</DAT>
<DAT name="USYNTAX">PROCSCRIPT</DAT>
<DAT name="ULIBRARY">USTRUCT</DAT>
<DAT name="UKVERSION">7</DAT>
<DAT name="UMVERSION">2</DAT>
<DAT name="UDESCR" xml:space='preserve'>Query struct per level</DAT>
<DAT name="UALT_NAME" xml:space='preserve'>Struct = ustruct::query(Source, NamePerLevel)</DAT>
<DAT name="UTEXT" xml:space='preserve'>ustruct::query(Struct, "name1&uSEP;name2&uSEP;...")</DAT>
</OCC>
<OCC>
<DAT name="UNAME">QUERY_1</DAT>
<DAT name="USYNTAX">PROCSCRIPT</DAT>
<DAT name="ULIBRARY">USTRUCT</DAT>
<DAT name="UKVERSION">7</DAT>
<DAT name="UMVERSION">2</DAT>
<DAT name="UDESCR" xml:space='preserve'>Query struct per level</DAT>
<DAT name="UALT_NAME" xml:space='preserve'>Struct = ustruct::query(Source, ProfilePerLevel)</DAT>
<DAT name="UTEXT" xml:space='preserve'>ustruct::query(Struct, "'syntax1'&uSEP;'syntax2'&uSEP;...")</DAT>
</OCC>
<OCC>
<DAT name="UNAME">QUERY_2</DAT>
<DAT name="USYNTAX">PROCSCRIPT</DAT>
<DAT name="ULIBRARY">USTRUCT</DAT>
<DAT name="UKVERSION">7</DAT>
<DAT name="UMVERSION">2</DAT>
<DAT name="UDESCR" xml:space='preserve'>Query struct per level</DAT>
<DAT name="UALT_NAME" xml:space='preserve'>Struct = ustruct::query(Source, NameAndIndexPerLevel)</DAT>
<DAT name="UTEXT" xml:space='preserve'>ustruct::query(Struct, "name1&uNOT;&uSEP;5&uSEP;name2&uNOT;&uSEP;3&uSEP;...")</DAT>
</OCC>
<OCC>
<DAT name="UNAME">QUERY_3</DAT>
<DAT name="USYNTAX">PROCSCRIPT</DAT>
<DAT name="ULIBRARY">USTRUCT</DAT>
<DAT name="UKVERSION">7</DAT>
<DAT name="UMVERSION">2</DAT>
<DAT name="UDESCR" xml:space='preserve'>Query struct per level</DAT>
<DAT name="UALT_NAME" xml:space='preserve'>Struct = ustruct::query(Source, ProfileAndIndexPerLevel)</DAT>
<DAT name="UTEXT" xml:space='preserve'>ustruct::query(Struct, "'syntax1'&uNOT;&uSEP;5&uSEP;'syntax2'&uNOT;&uSEP;3&uSEP;...")</DAT>
</OCC>
<OCC>
<DAT name="UNAME">TOJSON_1</DAT>
<DAT name="USYNTAX">PROCSCRIPT</DAT>
<DAT name="ULIBRARY">USTRUCT</DAT>
<DAT name="UKVERSION">7</DAT>
<DAT name="UMVERSION">2</DAT>
<DAT name="UDESCR" xml:space='preserve'>Return minified JSON string created from struct</DAT>
<DAT name="UALT_NAME" xml:space='preserve'>JSON = ustruct::toJSON(Struct, Minified)</DAT>
<DAT name="UTEXT" xml:space='preserve'>ustruct::toJSON(Struct, 1)</DAT>
</OCC>
<OCC>
<DAT name="UNAME">TOJSON_2</DAT>
<DAT name="USYNTAX">PROCSCRIPT</DAT>
<DAT name="ULIBRARY">USTRUCT</DAT>
<DAT name="UKVERSION">7</DAT>
<DAT name="UMVERSION">2</DAT>
<DAT name="UDESCR" xml:space='preserve'>Return prettified JSON string created from struct</DAT>
<DAT name="UALT_NAME" xml:space='preserve'>JSON = ustruct::toJSON(Struct, Prettified)</DAT>
<DAT name="UTEXT" xml:space='preserve'>ustruct::toJSON(Struct, 0)</DAT>
</OCC>
<OCC>
<DAT name="UNAME">TOLIST</DAT>
<DAT name="USYNTAX">PROCSCRIPT</DAT>
<DAT name="ULIBRARY">USTRUCT</DAT>
<DAT name="UKVERSION">7</DAT>
<DAT name="UMVERSION">2</DAT>
<DAT name="UDESCR" xml:space='preserve'>Return literal associated list from Struct</DAT>
<DAT name="UALT_NAME" xml:space='preserve'>List = ustruct::toList(Struct)</DAT>
<DAT name="UTEXT">ustruct::toList(Struct)</DAT>
</OCC>
<OCC>
<DAT name="UNAME">TOXML</DAT>
<DAT name="USYNTAX">PROCSCRIPT</DAT>
<DAT name="ULIBRARY">USTRUCT</DAT>
<DAT name="UKVERSION">7</DAT>
<DAT name="UMVERSION">2</DAT>
<DAT name="UDESCR" xml:space='preserve'>Return XML string from Struct</DAT>
<DAT name="UALT_NAME" xml:space='preserve'>XML = ustruct::toXML(Struct)</DAT>
<DAT name="UTEXT">ustruct::toXML(Struct)</DAT>
</OCC>
</TABLE>
</UNIFACE>
