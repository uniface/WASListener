<?xml version='1.0' encoding='UTF-8' ?>
<!-- Created by Uniface - (C) Uniface B.V. All rights reserved -->
<!DOCTYPE UNIFACE PUBLIC "UNIFACE.DTD" "UNIFACE.DTD">
<UNIFACE release="10.3" repversion="7" xmlengine="2.0">
<TABLE>
<DSC name="UFORM" model="DICT" system="S" pseudo ="73" level="1" noupdate="0"
 rbk="0" ffsql="0" transnr="0" segsize="0" ufocc="0" charset=".U">
<FLD name="UTIMESTAMP" seqno="1" type="E" level="2" pack="0" scale="0" length="15"
 pointer="0" inum="0" ufocc="0" />
<FLD name="ULABEL" seqno="2" type="S" level="2" pack="0" scale="0" length="60"
 pointer="0" inum="1" ufocc="0" mandatory="yes" idxnum="1" idxsnr="101" />
<FLD name="FTYP" seqno="3" type="S" level="2" pack="1" scale="0" length="1"
 pointer="0" inum="0" ufocc="0" />
<FLD name="DATA_ACCESS" seqno="4" type="S" level="2" pack="1" scale="0" length="1"
 pointer="0" inum="0" ufocc="0" />
<FLD name="UKVERSION" seqno="5" type="N" level="2" pack="10" scale="0" length="2"
 pointer="0" inum="1" ufocc="0" idxnum="2" idxsnr="1" />
<FLD name="UMVERSION" seqno="6" type="N" level="2" pack="10" scale="0" length="2"
 pointer="0" inum="1" ufocc="0" idxnum="3" idxsnr="1" />
<FLD name="UDESCR" seqno="7" type="S" level="2" pack="13" scale="0" length="64"
 pointer="0" inum="0" ufocc="0" />
<FLD name="FHEAD" seqno="8" type="S" level="2" pack="0" scale="0" length="6"
 pointer="0" inum="0" ufocc="0" />
<FLD name="UCOLOR" seqno="9" type="S" level="2" pack="0" scale="0" length="6"
 pointer="0" inum="0" ufocc="0" />
<FLD name="WVPOS" seqno="10" type="S" level="2" pack="0" scale="0" length="6"
 pointer="0" inum="0" ufocc="0" />
<FLD name="WHPOS" seqno="11" type="S" level="2" pack="0" scale="0" length="6"
 pointer="0" inum="0" ufocc="0" />
<FLD name="WVSIZ" seqno="12" type="S" level="2" pack="0" scale="0" length="6"
 pointer="0" inum="0" ufocc="0" />
<FLD name="WHSIZ" seqno="13" type="S" level="2" pack="0" scale="0" length="6"
 pointer="0" inum="0" ufocc="0" />
<FLD name="CLRSCRN" seqno="14" type="S" level="2" pack="1" scale="0" length="1"
 pointer="0" inum="0" ufocc="0" />
<FLD name="UBORDER" seqno="15" type="S" level="2" pack="1" scale="0" length="1"
 pointer="0" inum="0" ufocc="0" />
<FLD name="RIBIN" seqno="16" type="S" level="2" pack="0" scale="0" length="60"
 pointer="0" inum="0" ufocc="0" />
<FLD name="RIBOT" seqno="17" type="S" level="2" pack="0" scale="0" length="60"
 pointer="0" inum="0" ufocc="0" />
<FLD name="MOVABLE" seqno="18" type="S" level="2" pack="1" scale="0" length="1"
 pointer="0" inum="0" ufocc="0" />
<FLD name="VIDEOINVERSE" seqno="19" type="S" level="2" pack="1" scale="0" length="1"
 pointer="0" inum="0" ufocc="0" />
<FLD name="VIDEOBRIGHT" seqno="20" type="S" level="2" pack="1" scale="0" length="1"
 pointer="0" inum="0" ufocc="0" />
<FLD name="VIDEOUNLINE" seqno="21" type="S" level="2" pack="1" scale="0" length="1"
 pointer="0" inum="0" ufocc="0" />
<FLD name="VIDEOBLINK" seqno="22" type="S" level="2" pack="1" scale="0" length="1"
 pointer="0" inum="0" ufocc="0" />
<FLD name="UPANEL" seqno="23" type="S" level="2" pack="1" scale="0" length="128"
 pointer="0" inum="0" ufocc="0" />
<FLD name="POSPANEL" seqno="24" type="S" level="2" pack="1" scale="0" length="1"
 pointer="0" inum="0" ufocc="0" />
<FLD name="UPULL" seqno="25" type="S" level="2" pack="1" scale="0" length="128"
 pointer="0" inum="0" ufocc="0" />
<FLD name="HIDESTACK" seqno="26" type="S" level="2" pack="1" scale="0" length="1"
 pointer="0" inum="0" ufocc="0" />
<FLD name="TEMPLATENAME" seqno="27" type="S" level="2" pack="0" scale="0" length="60"
 pointer="0" inum="1" ufocc="0" idxnum="4" idxsnr="1" />
<FLD name="UINHERIT" seqno="28" type="B" level="2" pack="0" scale="0" length="1"
 pointer="0" inum="0" ufocc="0" />
<FLD name="LIBRAR" seqno="29" type="S" level="2" pack="0" scale="0" length="60"
 pointer="0" inum="0" ufocc="0" />
<FLD name="UTRANSACT" seqno="30" type="S" level="2" pack="1" scale="0" length="8"
 pointer="0" inum="0" ufocc="0" />
<FLD name="UPURPOSE" seqno="31" type="S" level="2" pack="1" scale="0" length="1"
 pointer="0" inum="0" ufocc="0" />
<FLD name="UALT_NAME" seqno="32" type="S" level="2" pack="13" scale="0" length="64"
 pointer="0" inum="0" ufocc="0" />
<FLD name="UWAORDER" seqno="33" type="N" level="2" pack="7" scale="0" length="5"
 pointer="0" inum="0" ufocc="0" />
<FLD name="UCOMMENT" seqno="34" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",0,0,0,,1,0,1,\1D,0,0,0,," />
<FLD name="TPLACTUAL" seqno="35" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\C1,0,0,0,,0,0,0,," />
<FLD name="TPLACTUAL2" seqno="36" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\C2,0,0,0,,0,0,0,," />
<FLD name="UDECLARATIONS" seqno="37" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\C3,0,0,0,,0,0,0,," />
<FLD name="USCRIPT" seqno="38" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\C4,0,0,0,,0,0,0,," />
<FLD name="INIT" seqno="39" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\C5,0,0,0,,0,0,0,," />
<FLD name="CLEAR" seqno="40" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\C6,0,0,0,,0,0,0,," />
<FLD name="RETRIEVE" seqno="41" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\C7,0,0,0,,0,0,0,," />
<FLD name="RECORD" seqno="42" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\C8,0,0,0,,0,0,0,," />
<FLD name="STORE" seqno="43" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\C9,0,0,0,,0,0,0,," />
<FLD name="DELET" seqno="44" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\CA,0,0,0,,0,0,0,," />
<FLD name="ACCEPT" seqno="45" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\CB,0,0,0,,0,0,0,," />
<FLD name="QUIT" seqno="46" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\CC,0,0,0,,0,0,0,," />
<FLD name="MENU" seqno="47" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\CD,0,0,0,,0,0,0,," />
<FLD name="INTKEY" seqno="48" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\CE,0,0,0,,0,0,0,," />
<FLD name="SPRINT" seqno="49" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\CF,0,0,0,,0,0,0,," />
<FLD name="EPRINT" seqno="50" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\D0,0,0,0,,0,0,0,," />
<FLD name="ASYNC" seqno="51" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\D1,0,0,0,,0,0,0,," />
<FLD name="GENERAL" seqno="52" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\D2,0,0,0,,0,0,0,," />
<FLD name="FRLF" seqno="53" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\D3,0,0,0,,0,0,0,," />
<FLD name="FRGF" seqno="54" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\D4,0,0,0,,0,0,0,," />
<FLD name="SFUNC" seqno="55" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\D5,0,0,0,,0,0,0,," />
<FLD name="GETSTATE" seqno="56" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\D6,0,0,0,,0,0,0,," />
<FLD name="SETSTATE" seqno="57" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\D7,0,0,0,,0,0,0,," />
<FLD name="UCTRIGGERS" seqno="58" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\D8,0,0,0,,0,0,0,," />
<FLD name="FORMPIC" seqno="59" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\D9,0,0,0,,0,0,0,," />
<FLD name="TITLE" seqno="60" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\DA,0,0,0,,0,0,0,," />
<FLD name="WINPROP" seqno="61" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\DB,0,0,0,,0,0,0,," />
<FLD name="USCONTAINED" seqno="62" type="B" level="2" pack="128" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\DC,0,0,0,,0,0,0,," />
<FLD name="ATTACHED" seqno="63" type="B" level="2" pack="128" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\DD,0,0,0,,0,0,0,," />
<FLD name="UPOPUP" seqno="64" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\DE,0,0,0,,0,0,0,," />
<FLD name="USPLITPROP" seqno="65" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\DF,0,0,0,,0,0,0,," />
<FLD name="USTATEMANAGEDBY" seqno="66" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\E0,0,0,0,,0,0,0,," />
<FLD name="HTMLSKELETON" seqno="67" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\E1,0,0,0,,0,0,0,," />
</DSC>
<OCC>
<DAT name="UTIMESTAMP">2016-08-16T21:22:55.00</DAT>
<DAT name="ULABEL">UCESV</DAT>
<DAT name="UKVERSION">6</DAT>
<DAT name="UMVERSION">3</DAT>
<DAT name="UDESCR" xml:space='preserve'>Component - Entity Service</DAT>
<DAT name="WVPOS">3</DAT>
<DAT name="WHPOS">1</DAT>
<DAT name="WVSIZ">10</DAT>
<DAT name="WHSIZ">40</DAT>
<DAT name="CLRSCRN">N</DAT>
<DAT name="UBORDER">N</DAT>
<DAT name="UINHERIT">F</DAT>
<DAT name="UTRANSACT">3</DAT>
<DAT name="UPURPOSE">T</DAT>
<DAT name="UCOMMENT" xml:space='preserve'>{\rtf1\ansi\ansicpg1252\deff0\deflang1043{\fonttbl{\f0\fswiss\fprq2\fcharset0 Verdana;}{\f1\fnil\fprq2\fcharset2 Wingdings;}{\f2\fnil\fcharset2 Symbol;}}
\viewkind4\uc1\pard\lang1033\b\f0\fs16 About Uniface Entity Services (ESV)\par
\b0\par
Entity Services are implicitly activated by component database entities of which the Data Access property is set to "Y" (Via Entity Services).\par
\par
The public component interface of Entity Services is fixed and should not be changed; the implementation is free for change. The partner component operations can be changed.\par
\par
Public operations are named u*.\par
Partner operations are named z*.\par
\par
\b Operation invocation protocol\par
\b0 The following operations are fired on client component entity database I/O (assuming cautious locking):\par
\i\tab (Client entity triggers \f1\'e0\f0  Server component public operations)\par
\pard{\pntext\f2\'B7\tab}{\*\pn\pnlvlblt\pnf2\pnindent0{\pntxtb\'B7}}\fi-360\li709\tx2694\i0 trigger read (first only) \f1\'e0\f0  operation uRetr&lt;esvEntity&gt;\par
{\pntext\f2\'B7\tab}trigger lock \f1\'e0\f0  operation uLock\par
{\pntext\f2\'B7\tab}trigger store \f1\'e0\f0  operation uStore\par
{\pntext\f2\'B7\tab}trigger write \f1\'e0\f0  operation uUpd&lt;esvEntity&gt;\par
{\pntext\f2\'B7\tab}trigger delete \f1\'e0\f0  operation uRem&lt;esvEntity&gt;\par
{\pntext\f2\'B7\tab}trigger write/delete (after last) \f1\'e0\f0  operation uEndStore\par
{\pntext\f2\'B7\tab}commit \f1\'e0\f0  operation uCommit\par
{\pntext\f2\'B7\tab}rollback \f1\'e0\f0  operation uRollback\par
\pard\tx1985\par
\b Component properties\par
\pard{\pntext\f2\'B7\tab}{\*\pn\pnlvlblt\pnf2\pnindent0{\pntxtb\'B7}}\fi-360\li709\tx2694\b0 $where$ - where clause of read ProcScript statement at client component entity\par
{\pntext\f2\'B7\tab}$uWhere$ - u_where clause of read ProcScript statement at client component entity\par
{\pntext\f2\'B7\tab}$inStore$ - true between execution of uStore and uEndStore\par
\pard\b\par
\pard\tx2694 Differences in database access via DBMS path and Entity Services\par
\pard\li709\tx2694\b0\i (DBMS path / Entity Service)\par
\pard{\pntext\f2\'B7\tab}{\*\pn\pnlvlblt\pnf2\pnindent0{\pntxtb\'B7}}\fi-360\li709\tx2694\i0 CRUD: Yes / Yes\par
{\pntext\f2\'B7\tab}Profiles: Yes / Yes\par
{\pntext\f2\'B7\tab}Order by: Yes / Yes\par
{\pntext\f2\'B7\tab}Stepped hit list: Yes / No\par
{\pntext\f2\'B7\tab}Paging: Yes / Not by default\par
{\pntext\f2\'B7\tab}Data cashing: No / Yes\b\par
\pard\par
Instructions\par
\pard\fi-360\li709\tx2694\b0 1.\tab Create a component based on this template\par
\pard\fi-360\li709 2.\tab Give it a name, e.g. MYESV\par
3.\tab Insert the database entity for which you want to manage database I/O using this ESV\par
4.\tab Set the mandatory constants in the Declaration container\par
5.\tab Compile\par
6.\tab In the client component, set the Data Access property of the database entity to "Y" (via Entity Service).\line Note that the database entity of the client component must be based on the same super-type entity as the database entity of this Entity Service (ESV).\par
7.\tab Compile the client component\par
8.\tab Test\par
\pard\tx2694 At this point, database access of the client database entity behaves almost the same as if the Data Access property was set to "D" (Via DBMS path).\par
\pard\fi-360\li709\tx2694 9.\tab Modify the script to suit your needs.\b\par
}
</DAT>
<DAT name="UDECLARATIONS" xml:space='preserve'>; Your component defines here ...

; =============================================================================================
; An Entity Service is a Component that defines a business logic component 
; that handles database I/O for a single entity on behalf of other components.
;
; You still need to insert the database entity as a child of this component
; and set it's name in constant esvEntity just below.
; =============================================================================================

; Define the name of the entity (excluding model name):
#define esvEntity = NOT_DEFINED

; =============================================================================================

#if (&lt;esvEntity&gt; == NOT_DEFINED)
  #error Constant esvEntity not defined yet.
#endif

#comment Constants:
#define keyError      = -1
#define keyNew        = 0

#define keyInHitList  = 1
#define keyInDatabase = 2
#define primaryKey    = 1



; Your component VARIABLES block here ...
variables
  numeric inStore
  string  uWhere
  string  where
endvariables

</DAT>
<DAT name="USCRIPT" xml:space='preserve'>; See DOC tab for documentation and instructions.


; =============================================================================================
;
;                            PUBLIC INTERFACE - DO NOT CHANGE!
;
; =============================================================================================


public operation uRetr&lt;esvEntity&gt;
; purpose:  retrieve a list of occurrences given a particular profile
; pre:      first READ trigger at client component
params
  entity     &lt;esvEntity&gt; : OUT ; list of retrieved occurrences
  occurrence &lt;esvEntity&gt; : IN  ; profile occurrence
  string     fieldList   : IN  ; fields to be retrieved into &lt;esvEntity&gt;
  string     where       : IN  ; where clause for read (only used when called explicitly)
  string     uWhere      : IN  ; uWhere clause for read (only used when called explicitly)
endparams
variables
  numeric    n
endvariables

  if (where != "" &amp; uWhere != "")
    $instancehandle()-&gt;zException("uRetr&lt;esvEntity&gt;", "One of the parameters 'where' and 'uwhere' must be empty.")
    return (-1)
  endif

  $instancehandle()-&gt;zRetrA&lt;esvEntity&gt;(fieldList, n, where, uWhere) ; profile occ. is unpacked and made current. Retrieve the data.

  if (n &gt;= 0)
    set $subsetreturn("&lt;esvEntity&gt;") ; data to be returned is subsetted to the just retrieved set

    if ($status &lt; 0)
      $instancehandle()-&gt;zProcError($procerrorcontext)
      return (-1)
    endif
  endif

  return (n) ; data is packed and returned by UNIFACE
end ; uRetr&lt;esvEntity&gt;


public operation uStore&lt;esvEntity&gt;
; purpose: indicate a store transaction (i.e. a serie of Proc statements 'write' and 'delete' at the client)
; pre:     Proc statement 'store' at client component

  $inStore$ = 1
end ; uStore&lt;esvEntity&gt;


public operation uUpd&lt;esvEntity&gt;
; purpose: create or update an occurrence. Similar to uRem&lt;esvEntity&gt;
; pre:     Proc statement 'write' at client component ; uStore
params
  string     fieldList   : IN ; fields to be updated
  occurrence &lt;esvEntity&gt; : IN ; source occurrence: contains key + data for update
endparams
variables
  string  keyFields
  numeric n
endvariables

  if (!$inStore$)
    $instancehandle()-&gt;zException("uUpd&lt;esvEntity&gt;", "uStore must be called before uUpd.")
    remocc "&lt;esvEntity&gt;"
    return (-1)
  endif

  findkey "&lt;esvEntity&gt;", 1 ; look-up if we already have the source occurrence in our hitlist

  selectcase $status

  case &lt;keyError&gt;
    $instancehandle()-&gt;zProcError($procerrorcontext)
    remocc "&lt;esvEntity&gt;" ; remove source occurrence
    return (-1)

  case &lt;keyNew&gt; ; not in our hitlist, nor in database
    creocc "&lt;esvEntity&gt;"

    if (n = -1)
      return (-1)
    endif

    setocc "&lt;esvEntity&gt;", $curocc+1             ; position on source occurrence
    moveocc "&lt;esvEntity&gt;", $curocc-1, fieldList ; move data, delete source occurrence and position on target occurrence

    if ($status &lt; 0)                            ; move data was unsucessful
      $instancehandle()-&gt;zProcError($procerrorcontext)
      remocc "&lt;esvEntity&gt;"                      ; remove source occurrence ...
      setocc "&lt;esvEntity&gt;", $curocc-1
      remocc "&lt;esvEntity&gt;"                      ; ... and remove target occurrence
      return (-1)
    endif

    $occhandle("&lt;esvEntity&gt;")-&gt;afterCreate(n)

  case &lt;keyInHitlist&gt;                           ; already as target occurrence in our hitlist (position now in $result)
    moveocc "&lt;esvEntity&gt;", $result, fieldList   ; move data into target occurrence

    if ($status &lt; 0)                            ; move unsuccessful
      $instancehandle()-&gt;zProcError($procerrorcontext)
      remocc "&lt;esvEntity&gt;"                      ; remove source occurrence
      return (-1)
    endif

    $occhandle("&lt;esvEntity&gt;")-&gt;afterUpdate(n)

  case &lt;keyInDatabase&gt;                          ; already in database, but not in our hitlist. Retrieve into hitlist and update it.
    keyFields = $keyfields("&lt;esvEntity&gt;", &lt;primaryKey&gt;)
    putlistitems/id keyFields                   ; copy source occurrence's primary key data into keyFields
    creocc "&lt;esvEntity&gt;"                        ; create profile occurrence.
    getlistitems/id keyFields                   ; paste primary key data into profile occurrence

    $instancehandle()-&gt;zRetrA&lt;esvEntity&gt;(fieldList, n, "", "") ; retrieve target

    if (n &lt; 0)                                    ; retrieve unsucessful, target occurrence removed
      remocc "&lt;esvEntity&gt;"                        ; remove source occurrence
      return (-1)

    else
      setocc "&lt;esvEntity&gt;", $curocc+1             ; position on source occurrence
      moveocc "&lt;esvEntity&gt;", $curocc-1, fieldList ; move data from source into target, delete source and position on target

      if ($status &lt; 0)                            ; move unsucessful
        $instancehandle()-&gt;zProcError($procerrorcontext)
        remocc "&lt;esvEntity&gt;"                      ; remove source occurrence
        return (-1)
      endif
    endif

    $occhandle("&lt;esvEntity&gt;")-&gt;afterUpdate(n)

  endselectcase

  return (n)
end ; uUpd&lt;esvEntity&gt;


public operation uRem&lt;esvEntity&gt;
; purpose: mark an occurrence for deletion. Similar to uUpd&lt;esvEntity&gt;
; pre:     Proc statement 'delete' at client component ; uStore
; pre:     uStore
params
  occurrence &lt;esvEntity&gt; : IN ; source occurrence
endparams
variables
  numeric n
endvariables

  if (!$inStore$)
    $instancehandle()-&gt;zException("uRem&lt;esvEntity&gt;", "uStore&lt;esvEntity&gt; must be called before uRem&lt;esvEntity&gt;.")
    remocc "&lt;esvEntity&gt;"   ; remove source occurrence
    return (-1)
  endif

  findkey "&lt;esvEntity&gt;", 1 ; look-up target occurrence

  selectcase $status

  case &lt;KeyError&gt;
    $instancehandle()-&gt;zProcError($procerrorcontext)
    remocc "&lt;esvEntity&gt;"   ; remove source occurrence
    return (-1)

  case &lt;keyNew&gt;
                           ; already removed - done

  case &lt;keyInHitlist&gt;
    moveocc "&lt;esvEntity&gt;", $result, "" ; remove source and position on target

    if ($status &lt; 0)                   ; move unsuccessful
      $instancehandle()-&gt;zProcError($procerrorcontext)
      return (-1)
    endif

  case &lt;keyInDatabase&gt;
    $instancehandle()-&gt;zRetrA&lt;esvEntity&gt;("", n, "", "") ; retrieve it for removal

    if (n &lt; 0)
      return (n)
    endif
  endselectcase

  $occhandle("&lt;esvEntity&gt;")-&gt;beforeRemove(n)

  if (n = 0)
    remocc "&lt;esvEntity&gt;"
  endif

  return (n)
end ; uRem&lt;esvEntity&gt;


public operation uEndStore
; purpose: indicate store transaction is completed, start physical store process
; pre:     last Proc statement 'write' or 'delete' at client component ; uStore
variables
  numeric n
endvariables

  $inStore$ = 0
  $instancehandle()-&gt;zSave&lt;esvEntity&gt;(n) ; communicate physical write and delete to DBMS

  return (n)
end ; uEndStore


public operation uLock&lt;esvEntity&gt;
; purpose: lock occurrence
; pre:     Proc statement 'lock' at client component
params
  occurrence &lt;esvEntity&gt; : IN ; profile occurrence to be locked
endparams
variables
  numeric n
endvariables

  findkey "&lt;esvEntity&gt;", 1                     ; look-up target occurrence

  selectcase $status

  case &lt;keyError&gt;
    $instancehandle()-&gt;zProcError($procerrorcontext)
    remocc "&lt;esvEntity&gt;"                       ; remove profile occurrence
    return (-1)

  case &lt;keyNew&gt;
    $instancehandle()-&gt;zException("uLock&lt;esvEntity&gt;", "Occurrence does not exist.")
    remocc "&lt;esvEntity&gt;"                       ; remove profile occurrence
    return (-1)

  case &lt;keyInHitlist&gt;
    moveocc "&lt;esvEntity&gt;", $result, ""         ; remove profile occurrence and position on occurrence to be locked
    if ($status &lt; 0)
      $instancehandle()-&gt;zProcError($procerrorcontext)
      remocc "&lt;esvEntity&gt;"                     ; remove profile occurrence
      return (-1)
    endif

  case &lt;keyInDatabase&gt;
    $instancehandle()-&gt;zRetrA&lt;esvEntity&gt;("", n, "", "") ; retrieve it into hitlist

    if (n &lt; 0)
      return (n)
    endif
  endselectcase

  lock
  n = $status

  if (n &lt; 0)
    $instancehandle()-&gt;zProcError($procerrorcontext)
  endif

  return (n)
end ; uLock&lt;esvEntity&gt;


public operation uCommit
; purpose: commit transaction on ESV subtype's DBMS path
; pre:     Proc statement 'commit' at client component
variables
  numeric n
endvariables

  commit
  n = $status

  if (n &lt; 0)
     $instancehandle()-&gt;zProcError($procerrorcontext)
  endif

  return (n)
end ; uCommit


public operation uRollBack
; purpose: rollback transaction on ESV subtype's DBMS path
; pre:     Proc statement 'rollback' at client component
variables
  numeric n
endvariables

  clear
  rollback
  n = $status

  if (n &lt; 0)
     $instancehandle()-&gt;zProcError($procerrorcontext)

  endif

  return (n)
end ; uRollback


; =============================================================================================
;
;                               END OF PUBLIC INTERFACE
;
; =============================================================================================



; =============================================================================================
;
;                                 PARTNER OPERATIONS
;
; =============================================================================================


partner operation zRetrA&lt;esvEntity&gt;
params
  string fieldList : IN
  numeric n        : OUT
  string where     : IN
  string uWhere    : IN
endparams

  if (where != "")
    $where$  = where
  elseif (uWhere != "")
    $uWhere$ = uWhere
  endif

  $selectlist ("&lt;esvEntity&gt;") = fieldList
  retrieve/a "&lt;esvEntity&gt;"
  n = $status

  if (n &lt; 0)
    $instancehandle()-&gt;zProcError($procErrorContext)
    remocc "&lt;esvEntity&gt;" ; remove profile
  endif
end ; zRetrA&lt;esvEntity&gt;


partner operation zSave&lt;esvEntity&gt;
params
  numeric n : OUT
endparams

  store/e "&lt;esvEntity&gt;"
  n = $status

  if (n &lt; 0)
    $instancehandle()-&gt;zProcError($procErrorContext)
  endif
end ; zSave&lt;esvEntity&gt;


partner operation zProcError
; purpose: report an unexpected failure in a Proc statement
; client:  -
; pre:     context contains information about $procErrorContext
params
  string pContext : IN
endparams
variables
  string vError
  string vErrorDescr
  string vOperationName
endvariables

  getitem/id vError, pContext, "error"
  getitem/id vErrorDescr, pContext, "description"
  getitem/id vOperationName, pContext, "procName"
  putmess "Error detected by entity service %%$componentName()%%%, operation %%vOperationName%%%. %%vErrorDescr%%% (%%vError%%%)"
end ; zProcError


partner operation zException
params
  string pOperationName : IN
  string pErrorDescr    : IN
endparams

  putmess "Exception detected by entity service %%$componentName()%%%, operation %%pOperationName%%% failed. %%pErrorDescr%%%"
end ; zException</DAT>
</OCC>
</TABLE>
</UNIFACE>
