<?xml version='1.0' encoding='UTF-8' ?>
<!-- Created by Uniface - (C) Rocket Software B.V. All rights reserved -->
<!DOCTYPE UNIFACE PUBLIC "UNIFACE.DTD" "UNIFACE.DTD">
<UNIFACE release="10.4" repversion="8" xmlengine="2.0">
<TABLE>
<DSC name="UCTABLE" model="DICT" system="S" pseudo ="73" level="1" noupdate="0"
 rbk="0" ffsql="0" transnr="0" segsize="0" ufocc="0" charset=".U">
<FLD name="UTIMESTAMP" seqno="1" type="E" level="2" pack="0" scale="0" length="15"
 pointer="0" inum="0" ufocc="0" />
<FLD name="U_VLAB" seqno="2" type="S" level="2" pack="0" scale="0" length="60"
 pointer="0" inum="1" ufocc="0" mandatory="yes" idxnum="1" idxsnr="101" />
<FLD name="U_TLAB" seqno="3" type="S" level="2" pack="0" scale="0" length="60"
 pointer="0" inum="1" ufocc="0" mandatory="yes" idxnum="1" idxsnr="102" />
<FLD name="UKVERSION" seqno="4" type="N" level="2" pack="10" scale="0" length="2"
 pointer="0" inum="1" ufocc="0" idxnum="2" idxsnr="1" />
<FLD name="UMVERSION" seqno="5" type="N" level="2" pack="10" scale="0" length="2"
 pointer="0" inum="1" ufocc="0" idxnum="3" idxsnr="1" />
<FLD name="UPURPOSE" seqno="6" type="S" level="2" pack="1" scale="0" length="1"
 pointer="0" inum="0" ufocc="0" />
<FLD name="UALT_NAME" seqno="7" type="S" level="2" pack="13" scale="0" length="128"
 pointer="0" inum="0" ufocc="0" />
<FLD name="UKEYWORDS" seqno="8" type="S" level="2" pack="13" scale="0" length="256"
 pointer="0" inum="0" ufocc="0" />
<FLD name="UWAORDER" seqno="9" type="N" level="2" pack="7" scale="0" length="5"
 pointer="0" inum="0" ufocc="0" />
</DSC>
<OCC>
<DAT name="UTIMESTAMP">2022-06-13T14:26:03.00</DAT>
<DAT name="U_VLAB">MODEL</DAT>
<DAT name="U_TLAB">UENTDB</DAT>
<DAT name="UKVERSION">5</DAT>
<DAT name="UMVERSION">3</DAT>
</OCC>
</TABLE>
<TABLE>
<DSC name="UCGROUP" model="DICT" system="S" pseudo ="73" level="1" noupdate="0"
 rbk="0" ffsql="0" transnr="0" segsize="0" ufocc="0" charset=".U">
<FLD name="UTIMESTAMP" seqno="1" type="E" level="2" pack="0" scale="0" length="15"
 pointer="0" inum="0" ufocc="0" />
<FLD name="U_GLAB" seqno="2" type="S" level="2" pack="0" scale="0" length="60"
 pointer="0" inum="1" ufocc="0" mandatory="yes" idxnum="1" idxsnr="101" />
<FLD name="U_VLAB" seqno="3" type="S" level="2" pack="0" scale="0" length="60"
 pointer="0" inum="3" ufocc="0" mandatory="yes" idxnum="1,2,3" idxsnr="102,1,1" />
<FLD name="U_TLAB" seqno="4" type="S" level="2" pack="0" scale="0" length="60"
 pointer="0" inum="1" ufocc="0" mandatory="yes" idxnum="2" idxsnr="2" />
<FLD name="UPARENT" seqno="5" type="S" level="2" pack="0" scale="0" length="60"
 pointer="0" inum="0" ufocc="0" />
<FLD name="UKVERSION" seqno="6" type="N" level="2" pack="10" scale="0" length="2"
 pointer="0" inum="1" ufocc="0" idxnum="4" idxsnr="1" />
<FLD name="UMVERSION" seqno="7" type="N" level="2" pack="10" scale="0" length="2"
 pointer="0" inum="1" ufocc="0" idxnum="5" idxsnr="1" />
<FLD name="UDESCR" seqno="8" type="S" level="2" pack="13" scale="0" length="256"
 pointer="0" inum="0" ufocc="0" />
<FLD name="U_BORD" seqno="9" type="S" level="2" pack="1" scale="0" length="1"
 pointer="0" inum="0" ufocc="0" />
<FLD name="U_INDB" seqno="10" type="S" level="2" pack="1" scale="0" length="1"
 pointer="0" inum="0" ufocc="0" />
<FLD name="DB_ACCESS" seqno="11" type="S" level="2" pack="1" scale="0" length="1"
 pointer="0" inum="0" ufocc="0" />
<FLD name="U_DBMS" seqno="12" type="S" level="2" pack="0" scale="0" length="3"
 pointer="0" inum="0" ufocc="0" />
<FLD name="U_UPD" seqno="13" type="S" level="2" pack="1" scale="0" length="1"
 pointer="0" inum="0" ufocc="0" />
<FLD name="U_MINR" seqno="14" type="N" level="2" pack="0" scale="0" length="6"
 pointer="0" inum="0" ufocc="0" />
<FLD name="U_MAXR" seqno="15" type="N" level="2" pack="0" scale="0" length="6"
 pointer="0" inum="0" ufocc="0" />
<FLD name="U_INT" seqno="16" type="S" level="2" pack="1" scale="0" length="128"
 pointer="0" inum="0" ufocc="0" />
<FLD name="UPURPOSE" seqno="17" type="S" level="2" pack="1" scale="0" length="1"
 pointer="0" inum="0" ufocc="0" />
<FLD name="UALT_NAME" seqno="18" type="S" level="2" pack="13" scale="0" length="128"
 pointer="0" inum="0" ufocc="0" />
<FLD name="UKEYWORDS" seqno="19" type="S" level="2" pack="13" scale="0" length="256"
 pointer="0" inum="0" ufocc="0" />
<FLD name="UWAORDER" seqno="20" type="N" level="2" pack="7" scale="0" length="5"
 pointer="0" inum="0" ufocc="0" />
<FLD name="UCOMMENT" seqno="21" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",0,0,0,,1,0,1,\1D,0,0,0,," />
<FLD name="TPLACTUAL" seqno="22" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\C1,0,0,0,,0,0,0,," />
<FLD name="UDECLARATIONS" seqno="23" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\C2,0,0,0,,0,0,0,," />
<FLD name="UCOLL_SCRIPT" seqno="24" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\C3,0,0,0,,0,0,0,," />
<FLD name="UOCC_SCRIPT" seqno="25" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\C4,0,0,0,,0,0,0,," />
<FLD name="P_READ" seqno="26" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\C5,0,0,0,,0,0,0,," />
<FLD name="P_WRIT" seqno="27" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\C6,0,0,0,,0,0,0,," />
<FLD name="P_DEL" seqno="28" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\C7,0,0,0,,0,0,0,," />
<FLD name="P_LOCK" seqno="29" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\C8,0,0,0,,0,0,0,," />
<FLD name="P_WUP" seqno="30" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\C9,0,0,0,,0,0,0,," />
<FLD name="P_DUP" seqno="31" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\CA,0,0,0,,0,0,0,," />
<FLD name="P_HELP" seqno="32" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\CB,0,0,0,,0,0,0,," />
<FLD name="P_DET" seqno="33" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\CC,0,0,0,,0,0,0,," />
<FLD name="P_OCUR" seqno="34" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\CD,0,0,0,,0,0,0,," />
<FLD name="P_OMOD" seqno="35" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\CE,0,0,0,,0,0,0,," />
<FLD name="P_OREM" seqno="36" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\CF,0,0,0,,0,0,0,," />
<FLD name="P_ODEF" seqno="37" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\D0,0,0,0,,0,0,0,," />
<FLD name="P_MENU" seqno="38" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\D1,0,0,0,,0,0,0,," />
<FLD name="P_FNDOCC" seqno="39" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\D2,0,0,0,,0,0,0,," />
<FLD name="P_ERROR" seqno="40" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\D3,0,0,0,,0,0,0,," />
<FLD name="P_GENERAL" seqno="41" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\D4,0,0,0,,0,0,0,," />
<FLD name="VLDE" seqno="42" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\D5,0,0,0,,0,0,0,," />
<FLD name="VLDK" seqno="43" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\D6,0,0,0,,0,0,0,," />
<FLD name="UECOPERS" seqno="44" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\D7,0,0,0,,0,0,0,," />
<FLD name="UEOOPERS" seqno="45" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\D8,0,0,0,,0,0,0,," />
<FLD name="UECTRIGGERS" seqno="46" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\D9,0,0,0,,0,0,0,," />
<FLD name="PRLO" seqno="47" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\DA,0,0,0,,0,0,0,," />
<FLD name="PSLO" seqno="48" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\DB,0,0,0,,0,0,0,," />
<FLD name="PRSO" seqno="49" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\DC,0,0,0,,0,0,0,," />
<FLD name="PSSO" seqno="50" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\DD,0,0,0,,0,0,0,," />
<FLD name="FLIST" seqno="51" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\DE,0,0,0,,0,0,0,," />
<FLD name="UPOPUP" seqno="52" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\DF,0,0,0,,0,0,0,," />
<FLD name="U_OBJSVC" seqno="53" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\E0,0,0,0,,0,0,0,," />
<FLD name="UEOINTERFACE" seqno="54" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\E1,0,0,0,,0,0,0,," />
<FLD name="UECINTERFACE" seqno="55" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\E2,0,0,0,,0,0,0,," />
<FLD name="UTARGET" seqno="56" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\E3,0,0,0,,0,0,0,," />
<FLD name="FRM_WIDGETTYPE" seqno="57" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\E4,0,0,0,,0,0,0,," />
<FLD name="FRM_WIDGETPROPS" seqno="58" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\E5,0,0,0,,0,0,0,," />
<FLD name="DSP_WIDGETTYPE" seqno="59" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\E6,0,0,0,,0,0,0,," />
<FLD name="DSP_WIDGETPROPS" seqno="60" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\E7,0,0,0,,0,0,0,," />
<FLD name="USP_WIDGETTYPE" seqno="61" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\E8,0,0,0,,0,0,0,," />
<FLD name="USP_WIDGETPROPS" seqno="62" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\E9,0,0,0,,0,0,0,," />
<FLD name="HFM_WIDGETTYPE" seqno="63" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\EA,0,0,0,,0,0,0,," />
<FLD name="HFM_WIDGETPROPS" seqno="64" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\EB,0,0,0,,0,0,0,," />
</DSC>
<OCC>
<DAT name="U_GLAB">UENTDB</DAT>
<DAT name="U_VLAB">MODEL</DAT>
<DAT name="U_TLAB">UENTDB</DAT>
<DAT name="UKVERSION">7</DAT>
<DAT name="UMVERSION">4</DAT>
<DAT name="UDESCR" xml:space='preserve'>Modeled entity - In database</DAT>
<DAT name="U_BORD">N</DAT>
<DAT name="U_INDB">Y</DAT>
<DAT name="DB_ACCESS">D</DAT>
<DAT name="U_DBMS">DEF</DAT>
<DAT name="U_UPD">Y</DAT>
<DAT name="U_MINR">0</DAT>
<DAT name="U_MAXR">0</DAT>
<DAT name="UPURPOSE">T</DAT>
<DAT name="UCOLL_SCRIPT" xml:space='preserve'>partner operation reportDataErrors
throws
; This operation looks for any data errors in the current collection and adds them to the struct report.
; The error messages are expected to be available as $occproperties and $fieldproperties using the "errormsg" id.
; The value of the "errormsg" property is expected to be an indexed list with one or more error messages.
; The report is a struct and its structure represents the collection structure.
; This report activates this same operation for all its inner entities/collections.
;
; Use this report after data validation of service components, where a report needs to be returned to the caller.
; Return this report as a reference of the report struct; serialize to e.g. JSON first before returning.
; You can also use myDatapErrorReport-&gt;$dbgstring to write the report to a log in human readable format.
; Interactive components, like DSPs, USPs, and FRMs read the errors directly from the data; no need to generate this report.
params
  byref struct pErrorReport: inout
endparams
variables
  struct vCollErrors, vOccErrors
  string vFieldName, vInnerEntityName, vErrorMsg, vMsg
endvariables

  ; Initialize the error report of the current collection and add it to the report struct
  pErrorReport-&gt;*{-1} = $newstruct
  vCollErrors = pErrorReport-&gt;*{-1}
  vCollErrors-&gt;$name = "&lt;$entname&gt;.&lt;$modelname&gt;"
  
  ; Iterate all occurrences of this collection.
  forentity "&lt;$entname&gt;"
    vCollErrors-&gt;*{-1} = $newstruct
    vOccErrors = vCollErrors-&gt;*{-1}
    vOccErrors-&gt;$name = "OCC%%($curocc(&lt;$entname&gt;))"

    ; Add occurrence errors (if any); includes any key errors
    getitem/id vErrorMsg, $occproperties(&lt;$entname&gt;), "errormsg"
    if ($status &gt; 0)
      forlist vMsg in vErrorMsg
        vOccErrors-&gt;"$error"{-1} = vErrorMsg
      endfor
    endif

    ; Add field errors (if any)
    forlist vFieldName in $entinfo(&lt;$entname&gt;, "PAINTEDFIELDS")
      getitem/id vErrorMsg, $fieldproperties("%%(vFieldname).&lt;$entname&gt;"), "errormsg"
      if ($status &gt; 0)
        vOccErrors-&gt;"%%(vFieldName)" = $newstruct
        vOccErrors-&gt;"%%(vFieldName)"-&gt;"$value" = @("%%(vFieldname).&lt;$entname&gt;")
        forlist vMsg in vErrorMsg
          vOccErrors-&gt;"%%(vFieldName)"-&gt;"$error"{-1} = vMsg
        endfor
      endif
    endfor
    
    ; Add errors of inner collections (if any)
    forlist vInnerEntityName in $entinfo(&lt;$entname&gt;, "INNER")
      $collhandle(vInnerEntityName)-&gt;reportDataErrors(vOccErrors)
    endfor

    ; Occurrence has no context -&gt; delete it
    if (vOccErrors-&gt;$membercount == 0)
      vOccErrors-&gt;$parent = ""
    endif
  endfor

end

</DAT>
<DAT name="UOCC_SCRIPT" xml:space='preserve'>trigger read
throws
; This trigger is fired as part of the retrieve process.
; Make sure not to leave the context of this occurrence, it would disrupt the trigger flow and give unpredictable results.
variables
  string vOrderByFieldName, vParams, vOptions, vMaxHits, vOffset
  boolean vOrderDescending
endvariables
  
  if ($rettype == 78)
    ; Read the next occurrence
    read
  
  else
    ; Read the occurrence, e.g.:
    ; - Get order-by information from e.g. $entityproperties
    getitem/id vOrderByFieldName, $entityproperties(&lt;$entname&gt;), "ORDERBY_FIELDNAME"
    if ($status &gt; 0)
      getitem/id vOrderDescending, $entityproperties(&lt;$entname&gt;), "ORDERBY_DESCENDING"
      if (vOrderDescending)
        vOrderByFieldName = "%%(vOrderByFieldName) desc"
      else
        vOrderByFieldName = "%%(vOrderByFieldName)"
      endif
    endif
    ; - Get paging info from e.g. $entityproperties
    getitem/id vMaxHits, $entityproperties(&lt;$entname&gt;), "MAX_HITS"
    if ($status &gt; 0)
      putitem/id vOptions, "maxhits", vMaxHits
    endif
    getitem/id vOffset, $entityproperties(&lt;$entname&gt;), "OFFSET"
    if ($status &gt; 0)
      putitem/id vOptions, "offset", vOffset
    endif
    ; - Get U_CONDITION, U_WHERE, or WHERE from e.g. $entityproperties and perform read
    getitem/id vParams, $entityproperties(&lt;$entname&gt;), "U_CONDITION"
    if ($status &gt; 0)
      read options vOptions u_condition (vParams) order by vOrderByFieldName
    else
      getitem/id vParams, $entityproperties(&lt;$entname&gt;), "U_WHERE"
      if ($status &gt; 0)
        read options vOptions u_where (vParams) order by vOrderByFieldName
      else
        getitem/id vParams, $entityproperties(&lt;$entname&gt;), "WHERE"
        if ($status &gt; 0)
          read options vOptions where (vParams) order by vOrderByFieldName
        else
          read options vOptions order by vOrderByFieldName
        endif
      endif
    endif
  endif

end


trigger lock
throws
; This trigger is fired as part of a database lock request.
; Depending on the locking strategy and DBMS locking support, this can happen at different moments:
; - During read (using read/lock)
; - At field start modification on interactive Form component
; - At field assignment in ProcScript
; - During a reconnect of disconnected records
; By catching lock exceptions and return a negative value, Uniface is instructed to continue processing.
; By not catching lock exceptions Uniface will not continue processing.

  try
    lock
  catch &lt;UIOSERR_UPDATE_NOT_ALLOWED&gt;
    ; No write or delete permission for the table or file. The occurrence is read-only (cannot be locked)
    return -5
  catch &lt;UIOSERR_WRITE_FAILURE&gt;
    ; An error occurred while writing, updating, or deleting the table or file; for example, lack of disk space,
    ; no write permission, or violation of a database constraint
    ; Inform caller by returning -6 and continue processing
    return -6
  catch &lt;UIOSERR_DUPLICATE_KEY&gt;
    ; The key exists in the database but was not found in the hitlist. This occurs when the user tries to enter a duplicate key
    ; Inform caller by returning -7 and continue processing
    return -7
  catch &lt;UIOSERR_LOGON_ERROR&gt;
    ; DBMS logon error. This can occur if the database connection has been lost or the maximum number
    ; of DBMS logons has already been reached
    ; Inform caller by returning -9 and continue processing
    return -9
  catch &lt;UIOSERR_LOCK_DATA_MISMATCH&gt;
    ; Occurrence has been modified or removed since it was retrieved
    ; Reload the occurrence and continue processing
    reload
  catch &lt;UIOSERR_LOCKED&gt;
    ; Occurrence already locked; wait and try again
    ; Inform caller by returning -11 and continue processing
    return -11
  endtry

end



trigger validateKey
throws
; This trigger is fired as part of the validation process and should be used to
; create primary and candidate key validation rules.
; Write one or more field validation checks and return a unique negative number for every failing check;
; this negative number is used by the error trigger to report the error.
; Remove this trigger if no key validation is required; note that the store might fail as a consequence.

  findkey "&lt;$entname&gt;", $curkey
  selectcase $status
  case 0
    ; No occurrence found with this key
    if ($foreign)
      ; Related one occurrence not found
      return -2
    endif
  case 1
    ; Occurrence with this key found in component
    if (!$foreign)
      ; Occurrence already exists in component
      return -3
    endif
  case 2
    ; Occurrence with this key found in DBMS
    if (!$foreign)
      ; Occurrence already exists in DBMS
      return -4
    endif
  elsecase
    return $status 
  endselectcase

  ; Validation is successful
  return 0

end


trigger validate
throws
; This trigger is fired as part of the validation process and should be used to
; create occurrence-specific validation rules.
; Write one or more validation checks and return a unique negative number for every failing check;
; this negative number is used by the error trigger to report the error.
; Remove this trigger if no procedural validation is required.

  ; Your occurrence validation rules here...
  ; if (FIELD1 &gt; FIELD2)
  ;   return -1
  ; elseif (FIELD3 &lt; FIELD4)
  ;   return -2
  ; endif

  ; Validation is successful
  return 0

end


trigger error
throws
; This trigger is fired when data validation of the current occurrence or key failed.
; This trigger should:
; - determine whether the validation error is to be ignored or not
;    - return &gt;=0 to indicate the error is to be ignored
;    - return &lt;0 to indicate the error is not to be ignored
; - determine the error message
; - determine the fields involved with the error for reporting purposes
; - report the error message.
variables
  string vErrorMsg, vErrors, vErrorFields, vFieldName
  numeric vKeyNr
endvariables

  ; Use all fields as default involved fields
  vErrorFields = $entinfo(&lt;$entname&gt;, "PAINTEDFIELDS")

  ; Determine the error message and involved error fields
  selectcase $error
  case 0147
    ; Error caused by occurrence trigger validateKey
    vKeyNr = $item("KEY", $dataerrorcontext)
    vErrorFields = $keyfields(&lt;$entname&gt;, vKeyNr)
    selectcase $item("STATUS", $dataerrorcontext)
    case -2
      vErrorMsg = $concat($text("%%($error)"), " - Related one-occurrence not found")
    case -3
      vErrorMsg = $concat($text("%%($error)"), " - Occurrence with the same key (%%(vKeyNr)) exists in component")
    case -4
      vErrorMsg = $concat($text("%%($error)"), " - Occurrence with the same key (%%(vKeyNr)) already exists in DBMS")
    ; ...
    elsecase
      vErrorMsg = $text("%%($error)")
    endselectcase
  case 0153       
    ; Error caused by occurrence trigger validate
    selectcase $item("STATUS", $dataerrorcontext)
    case -1
      vErrorMsg = $concat($text("%%($error)"), " - Your error message for check 1 here")
      ; vErrorFields = "..."  ; The list of fields involved with the validation error
    ; case ...
      ; ...
    elsecase
      vErrorMsg = $text("%%($error)")
      ; vErrorFields = "..."  ; The list of fields involved with this check
    endselectcase
  ; case 2004       ; No modifications allowed on occurrence of this entity
  ; case 2009       ; Occurrence locked
  ; case 2012       ; Occurrence in form does not match database occurrence
  ; case 2013       ; Occurrence does not exist
  ; ...
  elsecase
    vErrorMsg = $text("%%($error)")
    ; vErrorFields = "..."  ; The list of fields involved with the validation error
  endselectcase

  #if (&lt;$componenttype&gt;==D)
    ; For DSP components, (multiple) data errors are reported and shown via the involved fields:
    forlist vFieldName in vErrorFields
      getitem/id vErrors, $fieldproperties("%%(vFieldName).&lt;$entname&gt;"), "errormsg"
      putitem vErrors, -1, vErrorMsg
      putitem/id $fieldproperties("%%(vFieldName).&lt;$entname&gt;"), "errormsg", vErrors
    endfor
  #elseif (&lt;$componenttype&gt;==P)
    ; For USP components, (multiple) data errors are reported and shown via the involved fields:
    forlist vFieldName in vErrorFields
      getitem/id vErrors, $fieldproperties("%%(vFieldName).&lt;$entname&gt;"), "errormsg"
      putitem vErrors, -1, vErrorMsg
      putitem/id $fieldproperties("%%(vFieldName).&lt;$entname&gt;"), "errormsg", vErrors
      putitem/id $fieldproperties("%%(vFieldName).&lt;$entname&gt;"), "SubClass", "errorstyle"
    endfor
  #elseif (&lt;$componenttype&gt;==F)
    ; Form components usually do not get in situations where multiple errors need to be shown, because the Structure Editor prevents leaving modified fields/key/occurrences that are in error.
    ; For Form components, reporting the error message in the message line is sufficient.
    message vErrorMsg
  #else
    ; Other components log the error back to the data need, where it can be used to generate an error report once validation is completed.
    getitem/id vErrors, $occproperties(&lt;$entname&gt;), "errormsg"
    putitem vErrors, -1, vErrorMsg
    putitem/id $occproperties(&lt;$entname&gt;), "errormsg", vErrors
  #endif

  ; Return &gt;=0 to indicate the error is ignored
  ; Return &lt;0 to indicate the error is not ignored
  return -1

end


trigger write
throws
; This trigger is fired when Uniface writes the occurrences to the database, typically as part of a store.

  ; Your last moment field updates here, e.g.:
  ; TIMESTAMP.&lt;$entname&gt; = $datim

  write

end


trigger delete
throws
; This trigger is fired when Uniface deletes the occurrences from the database, typically as part of a store or erase.

  delete

end</DAT>
<DAT name="UEOINTERFACE">UENTDB_OCC</DAT>
<DAT name="UECINTERFACE">UENTDB_COL</DAT>
<DAT name="FRM_WIDGETTYPE">U_NONE</DAT>
<DAT name="DSP_WIDGETTYPE">U_NONE</DAT>
<DAT name="USP_WIDGETTYPE">U_NONE</DAT>
<DAT name="USP_WIDGETPROPS" xml:space='preserve'>U_MAXOCC=&uSEP;U_ATLEASTONE=1&uSEP;U_STARTOCC=1</DAT>
<DAT name="HFM_WIDGETTYPE">U_NONE</DAT>
</OCC>
</TABLE>
<TABLE>
<DSC name="UCFIELD" model="DICT" system="S" pseudo ="73" level="1" noupdate="0"
 rbk="0" ffsql="0" transnr="0" segsize="0" ufocc="0" charset=".U">
<FLD name="UTIMESTAMP" seqno="1" type="E" level="2" pack="0" scale="0" length="15"
 pointer="0" inum="0" ufocc="0" />
<FLD name="U_FLAB" seqno="2" type="S" level="2" pack="0" scale="0" length="60"
 pointer="0" inum="2" ufocc="0" mandatory="yes" idxnum="1,2" idxsnr="101,1" />
<FLD name="U_VLAB" seqno="3" type="S" level="2" pack="0" scale="0" length="60"
 pointer="0" inum="4" ufocc="0" mandatory="yes" idxnum="1,2,3,4" idxsnr="102,2,1,1" />
<FLD name="U_TLAB" seqno="4" type="S" level="2" pack="0" scale="0" length="60"
 pointer="0" inum="3" ufocc="0" mandatory="yes" idxnum="1,3,4" idxsnr="103,2,2" />
<FLD name="U_FSEQ" seqno="5" type="N" level="2" pack="0" scale="5" length="10"
 pointer="0" inum="1" ufocc="0" idxnum="3" idxsnr="3" />
<FLD name="UKVERSION" seqno="6" type="N" level="2" pack="10" scale="0" length="2"
 pointer="0" inum="1" ufocc="0" idxnum="5" idxsnr="1" />
<FLD name="UMVERSION" seqno="7" type="N" level="2" pack="10" scale="0" length="2"
 pointer="0" inum="1" ufocc="0" idxnum="6" idxsnr="1" />
<FLD name="UDESCR" seqno="8" type="S" level="2" pack="13" scale="0" length="256"
 pointer="0" inum="0" ufocc="0" />
<FLD name="U_DTYP" seqno="9" type="S" level="2" pack="1" scale="0" length="10"
 pointer="0" inum="0" ufocc="0" />
<FLD name="IS_EXTERNAL" seqno="10" type="S" level="2" pack="1" scale="0" length="1"
 pointer="0" inum="0" ufocc="0" />
<FLD name="IS_STATIC" seqno="11" type="S" level="2" pack="1" scale="0" length="1"
 pointer="0" inum="0" ufocc="0" />
<FLD name="IS_CONTROL" seqno="12" type="S" level="2" pack="1" scale="0" length="1"
 pointer="0" inum="0" ufocc="0" />
<FLD name="U_INT" seqno="13" type="S" level="2" pack="1" scale="0" length="128"
 pointer="0" inum="0" ufocc="0" />
<FLD name="DATA_SYNTAX" seqno="14" type="S" level="2" pack="0" scale="0" length="256"
 pointer="0" inum="0" ufocc="0" />
<FLD name="DATA_LAYOUT" seqno="15" type="S" level="2" pack="0" scale="0" length="192"
 pointer="0" inum="0" ufocc="0" />
<FLD name="UPURPOSE" seqno="16" type="S" level="2" pack="1" scale="0" length="1"
 pointer="0" inum="0" ufocc="0" />
<FLD name="UALT_NAME" seqno="17" type="S" level="2" pack="13" scale="0" length="128"
 pointer="0" inum="0" ufocc="0" />
<FLD name="UKEYWORDS" seqno="18" type="S" level="2" pack="13" scale="0" length="256"
 pointer="0" inum="0" ufocc="0" />
<FLD name="UWAORDER" seqno="19" type="N" level="2" pack="7" scale="0" length="5"
 pointer="0" inum="0" ufocc="0" />
<FLD name="UCOMMENT" seqno="20" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",0,0,0,,1,0,1,\1D,0,0,0,," />
<FLD name="ACTVALS" seqno="21" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\C1,0,0,0,,0,0,0,," />
<FLD name="UDECLARATIONS" seqno="22" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\C2,0,0,0,,0,0,0,," />
<FLD name="USCRIPT" seqno="23" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\C3,0,0,0,,0,0,0,," />
<FLD name="P_HELP" seqno="24" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\C4,0,0,0,,0,0,0,," />
<FLD name="P_DET" seqno="25" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\C5,0,0,0,,0,0,0,," />
<FLD name="P_SMOD" seqno="26" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\C6,0,0,0,,0,0,0,," />
<FLD name="P_EMOD" seqno="27" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\C7,0,0,0,,0,0,0,," />
<FLD name="P_NFLD" seqno="28" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\C8,0,0,0,,0,0,0,," />
<FLD name="P_PFLD" seqno="29" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\C9,0,0,0,,0,0,0,," />
<FLD name="P_ENCR" seqno="30" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\CA,0,0,0,,0,0,0,," />
<FLD name="P_DECR" seqno="31" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\CB,0,0,0,,0,0,0,," />
<FLD name="P_MENU" seqno="32" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\CC,0,0,0,,0,0,0,," />
<FLD name="P_ERROR" seqno="33" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\CD,0,0,0,,0,0,0,," />
<FLD name="P_GENERAL" seqno="34" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\CE,0,0,0,,0,0,0,," />
<FLD name="P_FORMAT" seqno="35" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\CF,0,0,0,,0,0,0,," />
<FLD name="P_DEFORMAT" seqno="36" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\D0,0,0,0,,0,0,0,," />
<FLD name="P_GETFOCUS" seqno="37" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\D1,0,0,0,,0,0,0,," />
<FLD name="P_VCHANGED" seqno="38" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\D2,0,0,0,,0,0,0,," />
<FLD name="VLDF" seqno="39" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\D3,0,0,0,,0,0,0,," />
<FLD name="UFTRIGGERS" seqno="40" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\D5,0,0,0,,0,0,0,," />
<FLD name="U_DESC" seqno="41" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\D6,0,0,0,,0,0,0,," />
<FLD name="VALLAB" seqno="42" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\D7,0,0,0,,0,0,0,," />
<FLD name="INITVALUE" seqno="43" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\D8,0,0,0,,0,0,0,," />
<FLD name="UPOPUP" seqno="44" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\D9,0,0,0,,0,0,0,," />
<FLD name="FRM_WIDGETTYPE" seqno="45" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\DA,0,0,0,,0,0,0,," />
<FLD name="FRM_WIDGETPROPS" seqno="46" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\DB,0,0,0,,0,0,0,," />
<FLD name="DSP_WIDGETTYPE" seqno="47" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\DC,0,0,0,,0,0,0,," />
<FLD name="DSP_WIDGETPROPS" seqno="48" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\DD,0,0,0,,0,0,0,," />
<FLD name="USP_WIDGETTYPE" seqno="49" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\DE,0,0,0,,0,0,0,," />
<FLD name="USP_WIDGETPROPS" seqno="50" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\DF,0,0,0,,0,0,0,," />
<FLD name="HFM_WIDGETTYPE" seqno="51" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\E0,0,0,0,,0,0,0,," />
<FLD name="HFM_WIDGETPROPS" seqno="52" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\E1,0,0,0,,0,0,0,," />
</DSC>
<OCC>
<DAT name="U_FLAB">FIELD</DAT>
<DAT name="U_VLAB">MODEL</DAT>
<DAT name="U_TLAB">UENTDB</DAT>
<DAT name="U_FSEQ">2</DAT>
<DAT name="UKVERSION">7</DAT>
<DAT name="UMVERSION">4</DAT>
<DAT name="UDESCR" xml:space='preserve'>In-database field</DAT>
<DAT name="U_DTYP">S</DAT>
<DAT name="IS_EXTERNAL">T</DAT>
<DAT name="IS_STATIC">F</DAT>
<DAT name="IS_CONTROL">F</DAT>
<DAT name="U_INT">C40</DAT>
<DAT name="USCRIPT" xml:space='preserve'>trigger validate
throws
; This trigger is fired as part of the validation process and should be used to create field-specific validation rules.
; Write one or more field validation checks and return a unique negative number for every failing check.
; This negative number is used by the error trigger to report the error.
; Remove this trigger if no procedural validation is required.

  ; Your field validation rules here...
  ; if (&lt;$fieldname&gt;.&lt;$entname&gt; &lt; 0)
  ;   return -1
  ; elseif (&lt;$fieldname&gt;.&lt;$entname&gt; &gt; 100)
  ;   return -2
  ; endif

  ; Validation is successful.
  return 0

end


trigger error
throws
; This trigger is fired when data validation of the current field failed.
; This trigger should:
; 1. determine whether the validation error is to be ignored or not
;    - return &gt;=0 to indicate the error is to be ignored
;    - return &lt;0 to indicate the error is not to be ignored
; 2. determine the error message
; 3. report the error message
variables
  string vErrorMsg, vDataErrorContext, vErrors
endvariables

  ; Determine error message
  selectcase $error
  case 0140
    ; Validation error caused by field trigger validate
    selectcase $item("STATUS", $dataerrorcontext)
    case -1
      ; vErrorMsg = $concat($text("%%($error)"), " - Check 1 in validate trigger failed")
      vErrorMsg = $concat($text("%%($error)"), " - Value must be between 0 and 100")
    case -2
      vErrorMsg = $concat($text("%%($error)"), " - Check 2 in validate trigger failed")
    elsecase
      vErrorMsg = $text("%%($error)")
    endselectcase
  ; case 0119       ; illegal ValRep value
  ; case 0120       ; subfield too large
  ; case 0121       ; subfield too small
  ; case 0122       ; incorrect checkdigit
  ; case 0123       ; illegal format for numeric field
  ; case 0124       ; illegal format for date field
  ; case 0125       ; illegal format for time field
  ; case 0126       ; illegal syntax format
  ; case 0127       ; illegal entry format
  ; case 0128       ; subfield too large to check
  ; case 0129       ; subfield(s) are required
  ; case 0130       ; too many subfields specified
  ; case 0138       ; illegal format for floating field
  ; ...
  elsecase
    vErrorMsg = $text("%%($error)")
  endselectcase

  #if (&lt;$componenttype&gt;==D)
    ; For DSP components, (multiple) data errors are reported and shown via the field:
    getitem/id vErrors, $fieldproperties(&lt;$fieldname&gt;.&lt;$entname&gt;), "errormsg"
    putitem vErrors, -1, vErrorMsg
    putitem/id $fieldproperties(&lt;$fieldname&gt;.&lt;$entname&gt;), "errormsg", vErrors
  #elseif (&lt;$componenttype&gt;==P)
    ; For USP components, (multiple) data errors are reported and shown via the field:
    getitem/id vErrors, $fieldproperties(&lt;$fieldname&gt;.&lt;$entname&gt;), "errormsg"
    putitem vErrors, -1, vErrorMsg
    putitem/id $fieldproperties(&lt;$fieldname&gt;.&lt;$entname&gt;), "errormsg", vErrors
    putitem/id $fieldproperties(&lt;$fieldname&gt;.&lt;$entname&gt;), "SubClass", "errorstyle"
  #elseif (&lt;$componenttype&gt;==F)
    ; Form components usually do not get in situations where multiple errors need to be shown, because the Structure Editor prevents leaving modified fields/key/occurrences that are in error.
    ; For Form components, reporting the error message in the message line is sufficient.
    message vErrorMsg
  #else
    ; Other components log the error back to the data need, where it can be used to generate an error report once validation is completed.
    getitem/id vErrors, $occproperties(&lt;$entname&gt;), "errormsg"
    putitem vErrors, -1, vErrorMsg
    putitem/id $occproperties(&lt;$entname&gt;), "errormsg", vErrors
  #endif

  ; Return &gt;=0 to indicate the error is ignored
  ; Return &lt;0 to indicate the error is not ignored
  return -1

end


</DAT>
<DAT name="FRM_WIDGETTYPE">EDITBOX</DAT>
<DAT name="DSP_WIDGETTYPE">EDITBOX</DAT>
<DAT name="USP_WIDGETTYPE">U_INPUT</DAT>
</OCC>
<OCC>
<DAT name="U_FLAB">KEYFIELD</DAT>
<DAT name="U_VLAB">MODEL</DAT>
<DAT name="U_TLAB">UENTDB</DAT>
<DAT name="U_FSEQ">1</DAT>
<DAT name="UKVERSION">7</DAT>
<DAT name="UMVERSION">4</DAT>
<DAT name="UDESCR" xml:space='preserve'>Key field</DAT>
<DAT name="U_DTYP">S</DAT>
<DAT name="IS_EXTERNAL">T</DAT>
<DAT name="IS_STATIC">F</DAT>
<DAT name="IS_CONTROL">F</DAT>
<DAT name="U_INT">C40</DAT>
<DAT name="USCRIPT" xml:space='preserve'>trigger validate
throws
; This trigger is fired as part of the validation process and should be used to create field-specific validation rules.
; Write one or more field validation checks and return a unique negative number for every failing check.
; This negative number is used by the error trigger to report the error.
; Remove this trigger if no procedural validation is required.

  ; Your field validation rules here...
  ; if (&lt;$fieldname&gt;.&lt;$entname&gt; &lt; 0)
  ;   return -1
  ; elseif (&lt;$fieldname&gt;.&lt;$entname&gt; &gt; 100)
  ;   return -2
  ; endif

  ; Validation is successful.
  return 0

end


trigger error
throws
; This trigger is fired when data validation of the current field failed.
; This trigger should:
; 1. determine whether the validation error is to be ignored or not
;    - return &gt;=0 to indicate the error is to be ignored
;    - return &lt;0 to indicate the error is not to be ignored
; 2. determine the error message
; 3. report the error message
variables
  string vErrorMsg, vDataErrorContext, vErrors
endvariables

  ; Determine error message
  selectcase $error
  case 0140
    ; Validation error caused by field trigger validate
    selectcase $item("STATUS", $dataerrorcontext)
    case -1
      ; vErrorMsg = $concat($text("%%($error)"), " - Check 1 in validate trigger failed")
      vErrorMsg = $concat($text("%%($error)"), " - Value must be between 0 and 100")
    case -2
      vErrorMsg = $concat($text("%%($error)"), " - Check 2 in validate trigger failed")
    elsecase
      vErrorMsg = $text("%%($error)")
    endselectcase
  ; case 0119       ; illegal ValRep value
  ; case 0120       ; subfield too large
  ; case 0121       ; subfield too small
  ; case 0122       ; incorrect checkdigit
  ; case 0123       ; illegal format for numeric field
  ; case 0124       ; illegal format for date field
  ; case 0125       ; illegal format for time field
  ; case 0126       ; illegal syntax format
  ; case 0127       ; illegal entry format
  ; case 0128       ; subfield too large to check
  ; case 0129       ; subfield(s) are required
  ; case 0130       ; too many subfields specified
  ; case 0138       ; illegal format for floating field
  ; ...
  elsecase
    vErrorMsg = $text("%%($error)")
  endselectcase

  #if (&lt;$componenttype&gt;==D)
    ; For DSP components, (multiple) data errors are reported and shown via the field:
    getitem/id vErrors, $fieldproperties(&lt;$fieldname&gt;.&lt;$entname&gt;), "errormsg"
    putitem vErrors, -1, vErrorMsg
    putitem/id $fieldproperties(&lt;$fieldname&gt;.&lt;$entname&gt;), "errormsg", vErrors
  #elseif (&lt;$componenttype&gt;==P)
    ; For USP components, (multiple) data errors are reported and shown via the field:
    getitem/id vErrors, $fieldproperties(&lt;$fieldname&gt;.&lt;$entname&gt;), "errormsg"
    putitem vErrors, -1, vErrorMsg
    putitem/id $fieldproperties(&lt;$fieldname&gt;.&lt;$entname&gt;), "errormsg", vErrors
    putitem/id $fieldproperties(&lt;$fieldname&gt;.&lt;$entname&gt;), "SubClass", "errorstyle"
  #elseif (&lt;$componenttype&gt;==F)
    ; Form components usually do not get in situations where multiple errors need to be shown, because the Structure Editor prevents leaving modified fields/key/occurrences that are in error.
    ; For Form components, reporting the error message in the message line is sufficient.
    message vErrorMsg
  #else
    ; Other components log the error back to the data need, where it can be used to generate an error report once validation is completed.
    getitem/id vErrors, $occproperties(&lt;$entname&gt;), "errormsg"
    putitem vErrors, -1, vErrorMsg
    putitem/id $occproperties(&lt;$entname&gt;), "errormsg", vErrors
  #endif

  ; Return &gt;=0 to indicate the error is ignored
  ; Return &lt;0 to indicate the error is not ignored
  return -1

end
</DAT>
<DAT name="U_DESC" xml:space='preserve'>Prim key field</DAT>
<DAT name="FRM_WIDGETTYPE">EDITBOX</DAT>
<DAT name="DSP_WIDGETTYPE">EDITBOX</DAT>
<DAT name="USP_WIDGETTYPE">U_INPUT</DAT>
<DAT name="HFM_WIDGETTYPE">U_NONE</DAT>
</OCC>
</TABLE>
<TABLE>
<DSC name="UCKEY" model="DICT" system="S" pseudo ="73" level="1" noupdate="0"
 rbk="0" ffsql="0" transnr="0" segsize="0" ufocc="0" charset=".U">
<FLD name="UTIMESTAMP" seqno="1" type="E" level="2" pack="0" scale="0" length="15"
 pointer="0" inum="0" ufocc="0" />
<FLD name="U_VLAB" seqno="2" type="S" level="2" pack="0" scale="0" length="60"
 pointer="0" inum="2" ufocc="0" mandatory="yes" idxnum="1,4" idxsnr="101,1" />
<FLD name="U_TLAB" seqno="3" type="S" level="2" pack="0" scale="0" length="60"
 pointer="0" inum="2" ufocc="0" mandatory="yes" idxnum="1,4" idxsnr="102,2" />
<FLD name="U_KSEQ" seqno="4" type="N" level="2" pack="0" scale="0" length="2"
 pointer="0" inum="1" ufocc="0" mandatory="yes" idxnum="1" idxsnr="103" />
<FLD name="U_KTYP" seqno="5" type="S" level="2" pack="1" scale="0" length="1"
 pointer="0" inum="0" ufocc="0" />
<FLD name="UKVERSION" seqno="6" type="N" level="2" pack="10" scale="0" length="2"
 pointer="0" inum="1" ufocc="0" idxnum="2" idxsnr="1" />
<FLD name="UMVERSION" seqno="7" type="N" level="2" pack="10" scale="0" length="2"
 pointer="0" inum="1" ufocc="0" idxnum="3" idxsnr="1" />
<FLD name="UDESCR" seqno="8" type="S" level="2" pack="13" scale="0" length="256"
 pointer="0" inum="0" ufocc="0" />
<FLD name="UPURPOSE" seqno="9" type="S" level="2" pack="1" scale="0" length="1"
 pointer="0" inum="0" ufocc="0" />
<FLD name="UALT_NAME" seqno="10" type="S" level="2" pack="13" scale="0" length="128"
 pointer="0" inum="0" ufocc="0" />
<FLD name="UKEYWORDS" seqno="11" type="S" level="2" pack="13" scale="0" length="256"
 pointer="0" inum="0" ufocc="0" />
<FLD name="UWAORDER" seqno="12" type="N" level="2" pack="7" scale="0" length="5"
 pointer="0" inum="0" ufocc="0" />
<FLD name="UCOMMENT" seqno="13" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",0,0,0,,1,0,1,\1D,0,0,0,," />
<FLD name="U_FLABS" seqno="14" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\C2,0,0,0,,0,0,0,," />
<FLD name="UVALKEY" seqno="15" type="S" level="2" pack="141" scale="0" length="0"
 pointer="0" inum="0" ufocc="0" varinfo=",1,0,2,\1F\C3,0,0,0,,0,0,0,," />
</DSC>
<OCC>
<DAT name="U_VLAB">MODEL</DAT>
<DAT name="U_TLAB">UENTDB</DAT>
<DAT name="U_KSEQ">1</DAT>
<DAT name="U_KTYP">P</DAT>
<DAT name="UKVERSION">7</DAT>
<DAT name="UMVERSION">1</DAT>
<DAT name="UDESCR" xml:space='preserve'>Primary Key</DAT>
<DAT name="U_FLABS">KEYFIELD</DAT>
<DAT name="UVALKEY">T</DAT>
</OCC>
</TABLE>
</UNIFACE>
